using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Xml;

namespace GAPPSF.GPX
{
    public class Export
    {
        private List<Core.Data.Geocache> _gcList;
        private Core.Data.Geocache _activeGcg = null;
        private Version _gpxVersion;
        private int _index;

        public static Version V100 = new Version(1, 0, 0);
        public static Version V101 = new Version(1, 0, 1);
        public static Version V102 = new Version(1, 0, 2);

        public Export(List<Core.Data.Geocache> gcList, Version gpxVersion)
        {
            _gcList = gcList;
            _gpxVersion = gpxVersion;
            _index = 0;
        }

        public void SetGeocacheList(List<Core.Data.Geocache> gcList)
        {
            _gcList = gcList;
            _index = 0;
            _gpxVersion = Version.Parse(Core.Settings.Default.GPXVersion);
            _activeGcg = null;
        }

        public int Count
        {
            get
            {
                return _gcList == null ? 0 : _gcList.Count;
            }
        }


        public string Start()
        {
            _index = 0;
            _activeGcg = null;
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            if (_gpxVersion == V100)
            {
                sb.AppendLine("<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"1.0\" creator=\"Globalcaching Pocket Query\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0 http://www.groundspeak.com/cache/1/0/cache.xsd\" xmlns=\"http://www.topografix.com/GPX/1/0\">");
            }
            else if (_gpxVersion == V101)
            {
                sb.AppendLine("<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"1.0\" creator=\"Globalcaching Pocket Query\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0/1 http://www.groundspeak.com/cache/1/0/1/cache.xsd\" xmlns=\"http://www.topografix.com/GPX/1/0\">");
            }
            else
            {
                sb.AppendLine("<gpx xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" version=\"1.0\" creator=\"Globalcaching Pocket Query\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0/2 http://www.groundspeak.com/cache/1/0/2/cache.xsd\" xmlns=\"http://www.topografix.com/GPX/1/0\">");
            }
            sb.AppendLine("  <name>Pocket Query</name>");
            sb.AppendLine("  <desc>Geocache file generated by Globalcaching App</desc>");
            sb.AppendLine("  <author>Globalcaching</author>");
            sb.AppendLine("  <email>globalcaching@gmail.com</email>");
            sb.AppendLine("  <url>http://www.globalcaching.eu</url>");
            sb.AppendLine("  <urlname>Geocaching - High Tech Treasure Hunting</urlname>");
            sb.AppendLine(string.Format("  <time>{0}Z</time>", DateTime.Now.ToUniversalTime().ToString("s")));
            sb.AppendLine("  <keywords>cache, geocache, globalcaching</keywords>");
            sb.AppendLine(string.Format("  <bounds minlat=\"{0}\" minlon=\"{1}\" maxlat=\"{2}\" maxlon=\"{3}\" />",
                 _gcList.Min(x => x.Lat).ToString().Replace(',','.'),
                 _gcList.Min(x => x.Lon).ToString().Replace(',', '.'),
                 _gcList.Max(x => x.Lat).ToString().Replace(',', '.'),
                 _gcList.Max(x => x.Lon).ToString().Replace(',', '.')));
            return sb.ToString();
        }

        public string WaypointData()
        {
            if (_activeGcg == null)
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
                sb.AppendLine("<gpx xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"1.0\" creator=\"Globalcaching. http://www.globalcaching.eu\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/0 http://www.topografix.com/GPX/1/0/gpx.xsd http://www.groundspeak.com/cache/1/0 http://www.groundspeak.com/cache/1/0/cache.xsd\" xmlns=\"http://www.topografix.com/GPX/1/0\">");
                sb.AppendLine("  <name>Waypoints for Cache Listings Generated by Globalcaching Application</name>");
                sb.AppendLine("  <desc>This is a list of supporting waypoints for caches generated by Globalcaching App</desc>");
                sb.AppendLine("  <author>Globalcaching</author>");
                sb.AppendLine("  <url>http://www.globalcaching.eu</url>");
                sb.AppendLine("  <urlname>Geocaching - High Tech Treasure Hunting</urlname>");
                sb.AppendLine("  <email>globalcaching@gmail.com</email>");
                sb.AppendLine(string.Format("  <time>{0}Z</time>", DateTime.Now.ToUniversalTime().ToString("s")));
                sb.AppendLine("  <keywords>cache, geocache, waypoints</keywords>");
                sb.AppendLine(string.Format("  <bounds minlat=\"{0}\" minlon=\"{1}\" maxlat=\"{2}\" maxlon=\"{3}\" />",
                     _gcList.Min(x => x.Lat).ToString().Replace(',', '.'),
                     _gcList.Min(x => x.Lon).ToString().Replace(',', '.'),
                     _gcList.Max(x => x.Lat).ToString().Replace(',', '.'),
                     _gcList.Max(x => x.Lon).ToString().Replace(',', '.')));
                return sb.ToString();
            }
            else
            {
                /*
                 *   <wpt lat="50.908867" lon="5.435833">
                        <time>2010-06-22T11:05:21.31</time>
                        <name>0026K5Z</name>
                        <cmt>Laat hier je cachemobiel even uitrusten en doe het laatste stukje te voet</cmt>
                        <desc>Parking</desc>
                        <url>http://www.geocaching.com/seek/wpt.aspx?WID=565497fc-1de4-4f36-8661-da9d0f7848e5</url>
                        <urlname>Parking</urlname>
                        <sym>Parking Area</sym>
                        <type>Waypoint|Parking Area</type>
                      </wpt>
                 */
                string result = "";
                bool hasContent = false;
                XmlDocument doc = new XmlDocument();
                XmlElement root = doc.CreateElement("root");
                doc.AppendChild(root);
                List<Core.Data.Waypoint> wpts = Utils.DataAccess.GetWaypointsFromGeocache(_activeGcg.Database, _activeGcg.Code);
                foreach (var wp in wpts)
                {
                    if (wp.Lat != null && wp.Lon != null)
                    {
                        hasContent = true;

                        XmlElement wpt = doc.CreateElement("wpt");
                        XmlAttribute attr = doc.CreateAttribute("lat");
                        XmlText txt = doc.CreateTextNode(wp.Lat.ToString().Replace(',', '.'));
                        attr.AppendChild(txt);
                        wpt.Attributes.Append(attr);
                        attr = doc.CreateAttribute("lon");
                        txt = doc.CreateTextNode(wp.Lon.ToString().Replace(',', '.'));
                        attr.AppendChild(txt);
                        wpt.Attributes.Append(attr);
                        root.AppendChild(wpt);

                        XmlElement el = doc.CreateElement("time");
                        txt = doc.CreateTextNode(string.Format("{0}Z",wp.Time.ToString("s")));
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("name");
                        txt = doc.CreateTextNode(wp.Code);
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("desc");
                        if (string.IsNullOrEmpty(wp.Description))
                        {
                            txt = doc.CreateTextNode(wp.Description);
                        }
                        else
                        {
                            txt = doc.CreateTextNode(wp.WPType.Name);
                        }
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("url");
                        txt = doc.CreateTextNode(wp.Url);
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("urlname");
                        if (string.IsNullOrEmpty(wp.UrlName))
                        {
                            txt = doc.CreateTextNode(wp.Description);
                        }
                        else
                        {
                            txt = doc.CreateTextNode(wp.UrlName);
                        }
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("sym");
                        txt = doc.CreateTextNode(wp.WPType.Name);
                        el.AppendChild(txt);
                        wpt.AppendChild(el);

                        el = doc.CreateElement("type");
                        txt = doc.CreateTextNode(string.Format("Waypoint|{0}", wp.WPType.Name));
                        el.AppendChild(txt);
                        wpt.AppendChild(el);
                    }
                }
                if (hasContent)
                {
                    using (System.IO.TemporaryFile tmp = new System.IO.TemporaryFile(true))
                    {
                        doc.Save(tmp.Path);
                        result = System.IO.File.ReadAllText(tmp.Path).Replace("</root>", "").Replace("<root>\r\n", "").Trim();
                    }
                }
                return validateXml(result);
            }
        }

        private string transformedGeocacheName(string orgName)
        {
            if (string.IsNullOrEmpty(orgName))
            {
                return "";
            }
            else if (orgName.Length <= Core.Settings.Default.GPXMaxNameLength)
            {
                return orgName;
            }
            else if (Core.Settings.Default.GPXMaxNameLength <= Core.Settings.Default.GPXMinStartOfname)
            {
                return orgName.Substring(0, Core.Settings.Default.GPXMaxNameLength);
            }
            else
            {
                return string.Format("{0}.{1}", orgName.Substring(0, Core.Settings.Default.GPXMinStartOfname), orgName.Substring(orgName.Length - (Core.Settings.Default.GPXMaxNameLength - Core.Settings.Default.GPXMinStartOfname) - 1));
            }
        }

        public string Next()
        {
            string result = "";
            XmlDocument doc = new XmlDocument();
            if (_index < _gcList.Count)
            {
                Core.Data.Geocache gc = _gcList[_index];
                _activeGcg = gc;

                XmlElement wpt = doc.CreateElement("wpt");
                XmlAttribute attr = doc.CreateAttribute("lat");
                XmlText txt = doc.CreateTextNode(gc.CustomLat == null ? gc.Lat.ToString().Replace(',', '.') : gc.CustomLat.ToString().Replace(',', '.'));
                attr.AppendChild(txt);
                wpt.Attributes.Append(attr);
                attr = doc.CreateAttribute("lon");
                txt = doc.CreateTextNode(gc.CustomLon == null ? gc.Lon.ToString().Replace(',', '.') : gc.CustomLon.ToString().Replace(',', '.'));
                attr.AppendChild(txt);
                wpt.Attributes.Append(attr);
                doc.AppendChild(wpt);

                XmlElement el = doc.CreateElement("time");
                txt = doc.CreateTextNode(string.Format("{0}Z",gc.PublishedTime.ToString("s")));
                el.AppendChild(txt);
                wpt.AppendChild(el);

                string nameValue;
                if (Core.Settings.Default.GPXUseNameForGCCode)
                {
                    nameValue = transformedGeocacheName(gc.Name ?? "");
                }
                else
                {
                    nameValue = gc.Code;
                }
                el = doc.CreateElement("name");
                if (gc.ContainsCustomLatLon)
                {
                    txt = doc.CreateTextNode(string.Format("{0}{1}", Core.Settings.Default.GPXExtraCoordPrefix ?? "", nameValue));
                }
                else
                {
                    txt = doc.CreateTextNode(nameValue);
                }
                el.AppendChild(txt);
                wpt.AppendChild(el);

                el = doc.CreateElement("desc");
                if (Core.Settings.Default.GPXUseHintsForDescription)
                {
                    txt = doc.CreateTextNode(gc.EncodedHints ?? "");
                }
                else
                {
                    txt = doc.CreateTextNode(string.Format("{0} by {1}, {2} ({3}/{4})", transformedGeocacheName(gc.Name), gc.Owner, gc.GeocacheType.GPXTag, gc.Difficulty.ToString("0.#").Replace(',', '.'), gc.Terrain.ToString("0.#").Replace(',', '.')));
                }
                el.AppendChild(txt);
                wpt.AppendChild(el);

                el = doc.CreateElement("url");
                txt = doc.CreateTextNode(gc.Url);
                el.AppendChild(txt);
                wpt.AppendChild(el);

                el = doc.CreateElement("urlname");
                txt = doc.CreateTextNode(transformedGeocacheName(gc.Name));
                el.AppendChild(txt);
                wpt.AppendChild(el);

                el = doc.CreateElement("sym");
                if (gc.Found)
                {
                    txt = doc.CreateTextNode("Geocache Found");
                }
                else
                {
                    txt = doc.CreateTextNode("Geocache");
                }
                el.AppendChild(txt);
                wpt.AppendChild(el);

                el = doc.CreateElement("type");
                txt = doc.CreateTextNode(string.Format("Geocache|{0}", gc.GeocacheType.GPXTag));
                el.AppendChild(txt);
                wpt.AppendChild(el);

                XmlElement cache = doc.CreateElement("groundspeak_cache");
                wpt.AppendChild(cache);
                attr = doc.CreateAttribute("id");
                txt = doc.CreateTextNode(Utils.Conversion.GetCacheIDFromCacheCode(gc.Code).ToString());
                attr.AppendChild(txt);
                cache.Attributes.Append(attr);

                attr = doc.CreateAttribute("available");
                txt = doc.CreateTextNode(gc.Available.ToString().ToLower());
                attr.AppendChild(txt);
                cache.Attributes.Append(attr);

                attr = doc.CreateAttribute("archived");
                txt = doc.CreateTextNode(gc.Archived.ToString().ToLower());
                attr.AppendChild(txt);
                cache.Attributes.Append(attr);

                if (_gpxVersion >= V102)
                {
                    attr = doc.CreateAttribute("memberonly");
                    txt = doc.CreateTextNode(gc.MemberOnly.ToString().ToLower());
                    attr.AppendChild(txt);
                    cache.Attributes.Append(attr);

                    attr = doc.CreateAttribute("customcoords");
                    txt = doc.CreateTextNode(gc.ContainsCustomLatLon.ToString().ToLower());
                    attr.AppendChild(txt);
                    cache.Attributes.Append(attr);

                    attr = doc.CreateAttribute("_xmlns_groundspeak");
                    txt = doc.CreateTextNode("http://www.groundspeak.com/cache/1/0/2");
                    attr.AppendChild(txt);
                    cache.Attributes.Append(attr);
                }
                else if (_gpxVersion == V101)
                {
                    attr = doc.CreateAttribute("_xmlns_groundspeak");
                    txt = doc.CreateTextNode("http://www.groundspeak.com/cache/1/0/1");
                    attr.AppendChild(txt);
                    cache.Attributes.Append(attr);
                }
                else
                {
                    attr = doc.CreateAttribute("_xmlns_groundspeak");
                    txt = doc.CreateTextNode("http://www.groundspeak.com/cache/1/0");
                    attr.AppendChild(txt);
                    cache.Attributes.Append(attr);
                }

                el = doc.CreateElement("groundspeak_name");
                txt = doc.CreateTextNode(transformedGeocacheName(gc.Name));
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_placed_by");
                txt = doc.CreateTextNode(gc.PlacedBy);
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_owner");
                txt = doc.CreateTextNode(gc.Owner);
                el.AppendChild(txt);
                cache.AppendChild(el);
                if (_gpxVersion >= V102)
                {
                    attr = doc.CreateAttribute("id");
                    txt = doc.CreateTextNode(gc.OwnerId);
                    attr.AppendChild(txt);
                    el.Attributes.Append(attr);
                }

                el = doc.CreateElement("groundspeak_type");
                txt = doc.CreateTextNode(gc.GeocacheType.GPXTag);
                el.AppendChild(txt);
                cache.AppendChild(el);
                if (_gpxVersion >= V102)
                {
                    attr = doc.CreateAttribute("id");
                    txt = doc.CreateTextNode(gc.GeocacheType.ID.ToString());
                    attr.AppendChild(txt);
                    el.Attributes.Append(attr);
                }

                el = doc.CreateElement("groundspeak_container");
                txt = doc.CreateTextNode(gc.Container.Name);
                el.AppendChild(txt);
                cache.AppendChild(el);
                if (_gpxVersion >= V102)
                {
                    attr = doc.CreateAttribute("id");
                    txt = doc.CreateTextNode(gc.Container.ID.ToString());
                    attr.AppendChild(txt);
                    el.Attributes.Append(attr);
                }

                if (_gpxVersion >= V101)
                {
                    if (gc.AttributeIds.Count > 0)
                    {
                        XmlElement attrs = doc.CreateElement("groundspeak_attributes");
                        cache.AppendChild(attrs);
                        foreach (int attrId in gc.AttributeIds)
                        {
                            int id = (int)Math.Abs(attrId);

                            el = doc.CreateElement("groundspeak_attribute");
                            txt = doc.CreateTextNode(Utils.DataAccess.GetGeocacheAttribute(id).Name);
                            el.AppendChild(txt);
                            attrs.AppendChild(el);
                            attr = doc.CreateAttribute("id");
                            txt = doc.CreateTextNode(id.ToString());
                            attr.AppendChild(txt);
                            el.Attributes.Append(attr);

                            attr = doc.CreateAttribute("inc");
                            if (attrId < 0)
                            {
                                txt = doc.CreateTextNode("0");
                            }
                            else
                            {
                                txt = doc.CreateTextNode("1");
                            }
                            attr.AppendChild(txt);
                            el.Attributes.Append(attr);
                        }
                    }
                }

                el = doc.CreateElement("groundspeak_difficulty");
                txt = doc.CreateTextNode(gc.Difficulty.ToString("0.#").Replace(',', '.'));
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_terrain");
                txt = doc.CreateTextNode(gc.Terrain.ToString("0.#").Replace(',', '.'));
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_country");
                txt = doc.CreateTextNode(gc.Country ?? "");
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_state");
                txt = doc.CreateTextNode(gc.State ?? "");
                el.AppendChild(txt);
                cache.AppendChild(el);

                el = doc.CreateElement("groundspeak_short_description");
                if (Core.Settings.Default.GPXAddFieldnotesToDescription && gc.ContainsNote)
                {
                    StringBuilder sb = new StringBuilder();
                    if (gc.ShortDescriptionInHtml)
                    {
                        if (!string.IsNullOrEmpty(gc.PersonalNote))
                        {
                            sb.AppendFormat("<p>{0}</p><br />", System.Web.HttpUtility.HtmlEncode(gc.PersonalNote));
                        }
                        if (!string.IsNullOrEmpty(gc.Notes))
                        {
                            if (gc.Notes.StartsWith("<p>", StringComparison.OrdinalIgnoreCase))
                            {
                                sb.AppendFormat("{0}<br />", gc.Notes);
                            }
                            else
                            {
                                sb.AppendFormat("<p>{0}</p><br />", gc.Notes);
                            }
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(gc.PersonalNote))
                        {
                            sb.AppendFormat("{0}\r\n\r\n", gc.PersonalNote);
                        }
                        if (!string.IsNullOrEmpty(gc.Notes))
                        {
                            sb.AppendFormat("{0}\r\n\r\n", gc.Notes);
                        }
                    }
                    sb.Append(gc.ShortDescription ?? "");
                    txt = doc.CreateTextNode(sb.ToString());
                }
                else
                {
                    txt = doc.CreateTextNode(gc.ShortDescription ?? "");
                }
                el.AppendChild(txt);
                cache.AppendChild(el);
                attr = doc.CreateAttribute("html");
                txt = doc.CreateTextNode(gc.ShortDescriptionInHtml.ToString().ToLower());
                attr.AppendChild(txt);
                el.Attributes.Append(attr);

                el = doc.CreateElement("groundspeak_long_description");
                if (Core.Settings.Default.GPXAddAdditionWaypointsToDescription)
                {
                    List<Core.Data.Waypoint> wpts = Utils.DataAccess.GetWaypointsFromGeocache(gc.Database, gc.Code);
                    if (wpts != null && wpts.Count > 0)
                    {
                        StringBuilder awp = new StringBuilder();
                        if (gc.LongDescriptionInHtml)
                        {
                            awp.AppendFormat("{0}<br /><br /><h2>Additiona Hidden Waypoints</h2>", gc.LongDescription ?? "");
                            awp.Append("<p>");
                            foreach (Core.Data.Waypoint wp in wpts)
                            {
                                awp.AppendFormat("{0} - {1} ({2})<br />", HttpUtility.HtmlEncode(wp.ID ?? ""), HttpUtility.HtmlEncode(wp.Description ?? ""), HttpUtility.HtmlEncode(Localization.TranslationManager.Instance.Translate(wp.WPType.Name)));
                                if (wp.Lat != null && wp.Lon != null)
                                {
                                    awp.AppendFormat("{0}<br />", HttpUtility.HtmlEncode(Utils.Conversion.GetCoordinatesPresentation((double)wp.Lat, (double)wp.Lon)));
                                }
                                else
                                {
                                    awp.Append("???<br />");
                                }
                                awp.AppendFormat("{0}<br /><br />", HttpUtility.HtmlEncode(wp.Comment ?? ""));
                            }
                            awp.Append("</p>");
                        }
                        else
                        {
                            awp.AppendFormat("{0}\r\n\r\nAdditiona Hidden Waypoints", gc.LongDescription ?? "");
                            foreach (Core.Data.Waypoint wp in wpts)
                            {
                                awp.AppendFormat("{0} - {1} ({2})\r\n", wp.ID ?? "", wp.Description ?? "", Localization.TranslationManager.Instance.Translate(wp.WPType.Name));
                                if (wp.Lat != null && wp.Lon != null)
                                {
                                    awp.AppendFormat("{0}\r\n", Utils.Conversion.GetCoordinatesPresentation((double)wp.Lat, (double)wp.Lon));
                                }
                                else
                                {
                                    awp.Append("???\r\n");
                                }
                                awp.AppendFormat("{0}\r\n\r\n", wp.Comment ?? "");
                            }
                        }
                        txt = doc.CreateTextNode(awp.ToString());
                    }
                    else
                    {
                        txt = doc.CreateTextNode(gc.LongDescription ?? "");
                    }
                }
                else
                {
                    txt = doc.CreateTextNode(gc.LongDescription ?? "");
                }
                el.AppendChild(txt);
                cache.AppendChild(el);
                attr = doc.CreateAttribute("html");
                txt = doc.CreateTextNode(gc.LongDescriptionInHtml.ToString().ToLower());
                attr.AppendChild(txt);
                el.Attributes.Append(attr);

                el = doc.CreateElement("groundspeak_encoded_hints");
                txt = doc.CreateTextNode(gc.EncodedHints ?? "");
                el.AppendChild(txt);
                cache.AppendChild(el);

                if (_gpxVersion >= V102)
                {
                    el = doc.CreateElement("groundspeak_personal_note");
                    txt = doc.CreateTextNode(gc.PersonalNote ?? "");
                    el.AppendChild(txt);
                    cache.AppendChild(el);

                    el = doc.CreateElement("groundspeak_favorite_points");
                    txt = doc.CreateTextNode(gc.Favorites.ToString());
                    el.AppendChild(txt);
                    cache.AppendChild(el);
                }

                List<Core.Data.Log> logs = Utils.DataAccess.GetLogs(gc.Database, gc.Code).Take(Core.Settings.Default.GPXMaxLogCount).ToList();
                if (logs.Count > 0)
                {
                    XmlElement logsel = doc.CreateElement("groundspeak_logs");
                    cache.AppendChild(logsel);
                    foreach (var l in logs)
                    {
                        XmlElement lel = doc.CreateElement("groundspeak_log");
                        logsel.AppendChild(lel);
                        attr = doc.CreateAttribute("id");
                        txt = doc.CreateTextNode(l.ID);
                        attr.AppendChild(txt);
                        lel.Attributes.Append(attr);

                        el = doc.CreateElement("groundspeak_date");
                        txt = doc.CreateTextNode(string.Format("{0}Z",l.Date.ToString("s")));
                        el.AppendChild(txt);
                        lel.AppendChild(el);

                        el = doc.CreateElement("groundspeak_type");
                        txt = doc.CreateTextNode(l.LogType.Name);
                        el.AppendChild(txt);
                        lel.AppendChild(el);
                        if (_gpxVersion >= V102)
                        {
                            attr = doc.CreateAttribute("id");
                            txt = doc.CreateTextNode(l.LogType.ID.ToString());
                            attr.AppendChild(txt);
                            el.Attributes.Append(attr);
                        }

                        el = doc.CreateElement("groundspeak_finder");
                        txt = doc.CreateTextNode(l.Finder);
                        el.AppendChild(txt);
                        lel.AppendChild(el);
                        attr = doc.CreateAttribute("id");
                        txt = doc.CreateTextNode(l.FinderId);
                        attr.AppendChild(txt);
                        el.Attributes.Append(attr);

                        el = doc.CreateElement("groundspeak_text");
                        txt = doc.CreateTextNode(l.Text);
                        el.AppendChild(txt);
                        lel.AppendChild(el);
                        attr = doc.CreateAttribute("encoded");
                        txt = doc.CreateTextNode(l.Encoded.ToString().ToLower());
                        attr.AppendChild(txt);
                        el.Attributes.Append(attr);
                    }
                }
                //todo, geocache images / trackables

                _index++;
            }
            using (System.IO.TemporaryFile tmp = new System.IO.TemporaryFile(true))
            {
                doc.Save(tmp.Path);
                result = System.IO.File.ReadAllText(tmp.Path);
                result = result.Replace("<groundspeak_", "<groundspeak:");
                result = result.Replace("</groundspeak_", "</groundspeak:");
                result = result.Replace("_xmlns_groundspeak", "xmlns:groundspeak");
            }
            return validateXml(result);
        }

        public string Finish()
        {
            return "</gpx>";
        }


        public string validateXml(string doc)
        {
            string result = doc;
            result = result.Replace("&auml;", "&#228;");
            result = result.Replace("&uuml;", "&#252;");
            result = result.Replace("&szlig;", "&#223;");
            result = result.Replace("&Auml;", "&#196;");
            result = result.Replace("&Ouml;", "&#214;");
            result = result.Replace("&Uuml;", "&#220;");
            result = result.Replace("&nbsp;", "&#160;");
            result = result.Replace("&Agrave;", "&#192;");
            result = result.Replace("&Egrave;", "&#200;");
            result = result.Replace("&Eacute;", "&#201;");
            result = result.Replace("&Ecirc;", "&#202;");
            result = result.Replace("&egrave;", "&#232;");
            result = result.Replace("&eacute;", "&#233;");
            result = result.Replace("&ecirc;", "&#234;");
            result = result.Replace("&agrave;", "&#224;");
            result = result.Replace("&iuml;", "&#239;");
            result = result.Replace("&ugrave;", "&#249;");
            result = result.Replace("&ucirc;", "&#251;");
            result = result.Replace("&uuml;", "&#252;");
            result = result.Replace("&ccedil;", "&#231;");
            result = result.Replace("&AElig;", "&#198;");
            result = result.Replace("&aelig;", "&#330;");
            result = result.Replace("&OElig;", "&#338;");
            result = result.Replace("&oelig;", "&#339;");
            result = result.Replace("&euro;", "&#8364;");
            result = result.Replace("&laquo;", "&#171;");
            result = result.Replace("&raquo;", "&#187;");

            result = result.Replace("&#xE4;", "&#228;");
            result = result.Replace("&#xE5;", "&#229;");
            result = result.Replace("&#xF6;", "&#246;");
            result = result.Replace("&#xFC;", "&#252;");

            try
            {
                int pos;
                pos = result.IndexOf("&#x");
                while (pos >= 0)
                {
                    //for now, just forget the characters
                    //todo: convert to decimal
                    string subs = result.Substring(pos, result.IndexOf(';', pos) - pos + 1);
                    result = result.Replace(subs, "");
                    pos = result.IndexOf("&#x");
                }
            }
            catch(Exception e)
            {
                Core.ApplicationData.Instance.Logger.AddLog(this, e);
            }

            return result;
        }
    }
}
