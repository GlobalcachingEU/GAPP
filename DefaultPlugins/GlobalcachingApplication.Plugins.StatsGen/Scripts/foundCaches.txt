        string strFoundCaches = "Found caches";
        string strTotalFound = "Total found";
        string strFound = "Found";
        string strAverage = "Average";
        string strPerDay = "per day";
        string strPerWeek = "per week";
        string strPerYear = "per year";
        string strArchived = "Archived";
        string strAvgDiff = "Avg. Diff. / Terr.";
        string strAvgOnOneDay = "Avg. on 1 day";
        string strOldestCache = "Oldest cache";
        string strPublishedOn = "published on";
        string strMostOnOneDay = "Most on 1 day";
        string strMostOnOneMonth = "Most on 1 month";

        RegisterText(new string[]{
		strFoundCaches,
		strTotalFound,
		strFound,
		strAverage,
		strPerDay,
		strPerWeek,
		strPerYear,
		strArchived,
		strAvgDiff,
		strAvgOnOneDay,
		strOldestCache,
		strPublishedOn,
		strMostOnOneDay,
		strMostOnOneMonth
		});

        Layout skin = new Layout(1);
        Layout.Statistics stats = new Layout.Statistics(Translate(strFoundCaches, false));
        skin.StatisticsBlocks[0] = stats;

        Layout.Statistics.Row row = new Layout.Statistics.Row();
        stats.Rows.Add(row);

        DateTime minDate = _myFinds.Min(x => x.logDate);
        DateTime maxDate = _myFinds.Max(x => x.logDate);
        TimeSpan ts = (maxDate - minDate);

        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strTotalFound, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items[row.Items.Count - 1].Width = "15%";
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0} # {1}", _myFinds.Count, Translate(strFound, false));
        row.Items[row.Items.Count - 1].Width = "35%";
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strAverage, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items[row.Items.Count - 1].Width = "20%";
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0:0.00} {3} ({1:0.0} {4}, {2:0.0} {5})", (double)_myFinds.Count / ts.TotalDays, 7.0 * (double)_myFinds.Count / ts.TotalDays, 365.0 * (double)_myFinds.Count / ts.TotalDays, Translate(strPerDay, false), Translate(strPerWeek, false), Translate(strPerYear, false));
        row.Items[row.Items.Count - 1].Width = "30%";

        row = new Layout.Statistics.Row();
        stats.Rows.Add(row);

        int arch = (from mf in _myFinds where mf.gc.Archived select mf).Count();

        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strArchived, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0} ({1:0.0}%)", arch, 100.0 * (double)arch / (double)_myFinds.Count);
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strAvgDiff, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0:0.00} / {1:0.00}", _myFinds.Average(x => x.gc.Difficulty), _myFinds.Average(x => x.gc.Terrain));

        row = new Layout.Statistics.Row();
        stats.Rows.Add(row);

        int uniqueDays = (from mf in _myFinds select mf.logDate.ToString("d")).Distinct().Count();
        DateTime minPub = _myFinds.Min(x => x.gc.PublishedTime);
        Geocache gc = (from mf in _myFinds where mf.gc.PublishedTime == minPub select mf.gc).FirstOrDefault();

        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strAvgOnOneDay, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0:0.00}", (double)_myFinds.Count / (double)uniqueDays);
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strOldestCache, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("<a href=\"{1}\" target=\"_blank\">{0}</a> (<span style=\"font-size:75%\">{2} {4} {3})</span>", ToHtml(gc.Name), gc.Url, ToHtml(gc.Code), ToHtml(gc.PublishedTime.ToString("d")), Translate(strPublishedOn));
        row.Items[row.Items.Count - 1].IsHtml = true;

        row = new Layout.Statistics.Row();
        stats.Rows.Add(row);
        
        var cdayGroup =
            (from mf in _myFinds
             group mf by mf.logDate.ToString("d") into g
             select new { Day = g.Key, Founds = g }).OrderByDescending(x => x.Founds.Count()).FirstOrDefault();
        var cmonthGroup =
            (from mf in _myFinds
             group mf by mf.logDate.ToString("yyyy-MM") into g
             select new { Month = g.Key, Founds = g }).OrderByDescending(x => x.Founds.Count()).FirstOrDefault();

        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strMostOnOneDay, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0} (<span style=\"font-size:75%\">{1}</span>)", cdayGroup.Founds.Count(), ToHtml(cdayGroup.Day));
        row.Items[row.Items.Count - 1].IsHtml = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = Translate(strMostOnOneMonth, false);
        row.Items[row.Items.Count - 1].IsMarker = true;
        row.Items.Add(new Layout.Statistics.Item());
        row.Items[row.Items.Count - 1].Text = string.Format("{0} (<span style=\"font-size:75%\">{1}</span>)", cmonthGroup.Founds.Count(), ToHtml(cmonthGroup.Month));
        row.Items[row.Items.Count - 1].IsHtml = true;

        return stats.ToString();
