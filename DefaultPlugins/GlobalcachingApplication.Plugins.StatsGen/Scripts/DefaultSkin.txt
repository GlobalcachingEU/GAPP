    public class Layout
    {
        public class Statistics
        {
            public class Item
            {
                public string Text { get; set; }
                public bool IsMarker { get; set; }
                public bool IsHtml { get; set; }
                public string Height { get; set; }
                public string Width { get; set; }
                public string Align { get; set; }
            }
            public class Row
            {
                public List<Item> Items;

                public Row()
                {
                    Items = new List<Item>();
                }
            }

            public string Title { get; set; }
            public string AxisLabelX { get; set; }
            public string AxisLabelY { get; set; }
            public string Width { get; set; }
            public string Align { get; set; }
            public List<Row> Rows { get; set; }

            public Statistics(string title)
            {
                Title = title;
                Width = "100%";
                Rows = new List<Row>();
            }
            public Statistics(string title, string axislabelX, string axislabelY): this(title)
            {
                AxisLabelX = axislabelX;
                AxisLabelY = axislabelY;
            }

            public override string ToString()
            {
                StringBuilder sb = new StringBuilder();

                //this layout
                //table with header (text is Title)
                //within this table, the table with the stats
                //assumption: all rows are os same length and all columns are of same length. At least 1 row and 1 column present 
                if (Rows.Count > 0)
                {
                    int cols = Rows[0].Items.Count;

                    sb.AppendLine("<table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" border=\"1\" style=\"border-left-style: none; border-right-style: none; border-top: 1.5pt solid black; border-bottom: 1.5pt solid black\">");
                    sb.AppendLine("<tr>");
                    sb.AppendLine(string.Format("<td style=\"background-color: #c00000; border-left-style: none; border-right-style: none; border-top-style: none; border-bottom: .75pt solid black\" ><b><font color=\"#FFFFFF\">{0}</font></b></td>", HttpUtility.HtmlEncode(Title)));
                    sb.AppendLine("</tr>");
                    sb.AppendLine("<tr>");
                    sb.AppendLine("<td>");
                    if (!string.IsNullOrEmpty(Align))
                    {
                        sb.AppendLine(string.Format("<div align=\"{0}\">", Align));
                    }
                    sb.AppendLine(string.Format("<table width=\"{0}\">", Width));
                    if (!string.IsNullOrEmpty(AxisLabelX) && string.IsNullOrEmpty(AxisLabelY))
                    {
                        sb.AppendLine(string.Format("<tr><td align=\"center\" colspan=\"{1}\">{0}</td></tr>", HttpUtility.HtmlEncode(AxisLabelX), cols));
                    }
                    else if (!string.IsNullOrEmpty(AxisLabelX) && !string.IsNullOrEmpty(AxisLabelY))
                    {
                        sb.AppendLine(string.Format("<tr><td valign=\"middle\" rowspan=\"{3}\">{2}</td><td align=\"center\" colspan=\"{1}\">{0}</td></tr>", HttpUtility.HtmlEncode(AxisLabelX), cols + 1, HttpUtility.HtmlEncode(AxisLabelY), Rows.Count + 1));
                    }
                    foreach (Row r in Rows)
                    {
                        sb.AppendLine("<tr>");
                        foreach (Item it in r.Items)
                        {
                            sb.AppendLine(string.Format("<td{0}{1}{2}{3}>",
                                string.IsNullOrEmpty(it.Height) ? "" : string.Format(" height=\"{0}\"", it.Height),
                                string.IsNullOrEmpty(it.Width) ? "" : string.Format(" width=\"{0}\"", it.Width),
                                string.IsNullOrEmpty(it.Align) ? "" : string.Format(" align=\"{0}\"", it.Align),
                                it.IsMarker ? " style=\"border-style: none; border-bottom: .75pt solid silver; background-color: #DDDDDD\"" : " style=\"border-style: none; border-bottom: .75pt solid silver\"")
                                );
                            sb.AppendLine(string.Format("{0}{1}{2}", it.IsMarker ? "<b>" : "", it.IsHtml ? it.Text : HttpUtility.HtmlEncode(it.Text), it.IsMarker ? "</b>" : ""));
                            sb.AppendLine("</td>");
                        }
                        sb.AppendLine("</tr>");
                    }
                    sb.AppendLine("</table>");
                    if (!string.IsNullOrEmpty(Align))
                    {
                        sb.AppendLine("</div>");
                    }

                    sb.AppendLine("</td>");
                    sb.AppendLine("</tr>");
                    sb.AppendLine("</table>");
                }

                return sb.ToString();
            }
        }

        public Statistics[] StatisticsBlocks { get; private set; }

        public Layout(int statisticsCount)
        {
            StatisticsBlocks = new Statistics[statisticsCount];
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            //this layout:
            //table for whole stats, column for each statsblock
            sb.AppendLine("<table width=\"100%\">");
            sb.AppendLine("<tr valign=\"top\">");
            foreach (Statistics stat in StatisticsBlocks)
            {
                sb.AppendLine(string.Format("<td width=\"{0:0}%\">", 100.0 / (double)StatisticsBlocks.Length));
                sb.AppendLine(stat.ToString());
                sb.AppendLine("</td>");
            }
            sb.AppendLine("</tr>");
            sb.AppendLine("</table>");
            sb.AppendLine("<br />");

            return sb.ToString();
        }
    }
